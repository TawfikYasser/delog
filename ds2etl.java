// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dq_poc.dq_etl_job_ds2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.DQ_Routines_4;
import routines.DQ_Routines_5;
import routines.DQ_Routines_3;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: DQ_ETL_Job_DS2 Purpose: For transforming and cleansing of sales
 * data.<br>
 * Description: This ETL job is to detect and load the sales data with data
 * quality issues into the dashboard for business decisions. <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class DQ_ETL_Job_DS2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (Temp_MySQL_Connection_Server != null) {

				this.setProperty("Temp_MySQL_Connection_Server", Temp_MySQL_Connection_Server.toString());

			}

			if (Temp_MySQL_Connection_Login != null) {

				this.setProperty("Temp_MySQL_Connection_Login", Temp_MySQL_Connection_Login.toString());

			}

			if (Temp_MySQL_Connection_AdditionalParams != null) {

				this.setProperty("Temp_MySQL_Connection_AdditionalParams",
						Temp_MySQL_Connection_AdditionalParams.toString());

			}

			if (Temp_MySQL_Connection_Port != null) {

				this.setProperty("Temp_MySQL_Connection_Port", Temp_MySQL_Connection_Port.toString());

			}

			if (Temp_MySQL_Connection_Password != null) {

				this.setProperty("Temp_MySQL_Connection_Password", Temp_MySQL_Connection_Password.toString());

			}

			if (Temp_MySQL_Connection_Database != null) {

				this.setProperty("Temp_MySQL_Connection_Database", Temp_MySQL_Connection_Database.toString());

			}

		}

		public String Temp_MySQL_Connection_Server;

		public String getTemp_MySQL_Connection_Server() {
			return this.Temp_MySQL_Connection_Server;
		}

		public String Temp_MySQL_Connection_Login;

		public String getTemp_MySQL_Connection_Login() {
			return this.Temp_MySQL_Connection_Login;
		}

		public String Temp_MySQL_Connection_AdditionalParams;

		public String getTemp_MySQL_Connection_AdditionalParams() {
			return this.Temp_MySQL_Connection_AdditionalParams;
		}

		public String Temp_MySQL_Connection_Port;

		public String getTemp_MySQL_Connection_Port() {
			return this.Temp_MySQL_Connection_Port;
		}

		public java.lang.String Temp_MySQL_Connection_Password;

		public java.lang.String getTemp_MySQL_Connection_Password() {
			return this.Temp_MySQL_Connection_Password;
		}

		public String Temp_MySQL_Connection_Database;

		public String getTemp_MySQL_Connection_Database() {
			return this.Temp_MySQL_Connection_Database;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "DQ_ETL_Job_DS2";
	private final String projectName = "DQ_POC";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					DQ_ETL_Job_DS2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(DQ_ETL_Job_DS2.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DQ_POC_DQ_ETL_Job_DS2 = new byte[0];
		static byte[] commonByteArray_DQ_POC_DQ_ETL_Job_DS2 = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public Integer SalesOrderID;

		public Integer getSalesOrderID() {
			return this.SalesOrderID;
		}

		public Integer SalesOrderDetailID;

		public Integer getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public Integer OrderQuantity;

		public Integer getOrderQuantity() {
			return this.OrderQuantity;
		}

		public Integer ProductID;

		public Integer getProductID() {
			return this.ProductID;
		}

		public Float UnitPrice;

		public Float getUnitPrice() {
			return this.UnitPrice;
		}

		public Float UnitPriceDiscount;

		public Float getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public String ModifiedDate;

		public String getModifiedDate() {
			return this.ModifiedDate;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String ShipDate;

		public String getShipDate() {
			return this.ShipDate;
		}

		public Integer Status;

		public Integer getStatus() {
			return this.Status;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer PersonID;

		public Integer getPersonID() {
			return this.PersonID;
		}

		public Integer BusinessEntityID;

		public Integer getBusinessEntityID() {
			return this.BusinessEntityID;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public Integer AddressID;

		public Integer getAddressID() {
			return this.AddressID;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String ZipCode;

		public String getZipCode() {
			return this.ZipCode;
		}

		public String StateCode;

		public String getStateCode() {
			return this.StateCode;
		}

		public String StateName;

		public String getStateName() {
			return this.StateName;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DQ_POC_DQ_ETL_Job_DS2.length) {
					if (length < 1024 && commonByteArray_DQ_POC_DQ_ETL_Job_DS2.length == 0) {
						commonByteArray_DQ_POC_DQ_ETL_Job_DS2 = new byte[1024];
					} else {
						commonByteArray_DQ_POC_DQ_ETL_Job_DS2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DQ_POC_DQ_ETL_Job_DS2, 0, length);
				strReturn = new String(commonByteArray_DQ_POC_DQ_ETL_Job_DS2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DQ_POC_DQ_ETL_Job_DS2) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.SalesOrderID = readInteger(dis);

					this.SalesOrderDetailID = readInteger(dis);

					this.OrderQuantity = readInteger(dis);

					this.ProductID = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.UnitPrice = null;
					} else {
						this.UnitPrice = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UnitPriceDiscount = null;
					} else {
						this.UnitPriceDiscount = dis.readFloat();
					}

					this.ModifiedDate = readString(dis);

					this.OrderDate = readString(dis);

					this.ShipDate = readString(dis);

					this.Status = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = readInteger(dis);

					this.SalesPersonID = readInteger(dis);

					this.PersonID = readInteger(dis);

					this.BusinessEntityID = readInteger(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Gender = readString(dis);

					this.EmailAddress = readString(dis);

					this.AddressID = readInteger(dis);

					this.Address = readString(dis);

					this.ZipCode = readString(dis);

					this.StateCode = readString(dis);

					this.StateName = readString(dis);

					this.CountryCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// Integer

				writeInteger(this.SalesOrderID, dos);

				// Integer

				writeInteger(this.SalesOrderDetailID, dos);

				// Integer

				writeInteger(this.OrderQuantity, dos);

				// Integer

				writeInteger(this.ProductID, dos);

				// Float

				if (this.UnitPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UnitPrice);
				}

				// Float

				if (this.UnitPriceDiscount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UnitPriceDiscount);
				}

				// String

				writeString(this.ModifiedDate, dos);

				// String

				writeString(this.OrderDate, dos);

				// String

				writeString(this.ShipDate, dos);

				// Integer

				writeInteger(this.Status, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// Integer

				writeInteger(this.CustomerID, dos);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.PersonID, dos);

				// Integer

				writeInteger(this.BusinessEntityID, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.EmailAddress, dos);

				// Integer

				writeInteger(this.AddressID, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.ZipCode, dos);

				// String

				writeString(this.StateCode, dos);

				// String

				writeString(this.StateName, dos);

				// String

				writeString(this.CountryCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQuantity=" + String.valueOf(OrderQuantity));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",ModifiedDate=" + ModifiedDate);
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",ShipDate=" + ShipDate);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",PersonID=" + String.valueOf(PersonID));
			sb.append(",BusinessEntityID=" + String.valueOf(BusinessEntityID));
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Gender=" + Gender);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",AddressID=" + String.valueOf(AddressID));
			sb.append(",Address=" + Address);
			sb.append(",ZipCode=" + ZipCode);
			sb.append(",StateCode=" + StateCode);
			sb.append(",StateName=" + StateName);
			sb.append(",CountryCode=" + CountryCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "salesdata";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = context.Temp_MySQL_Connection_AdditionalParams;
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + context.Temp_MySQL_Connection_Server + ":"
							+ context.Temp_MySQL_Connection_Port + "/" + context.Temp_MySQL_Connection_Database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = context.Temp_MySQL_Connection_AdditionalParams;
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + context.Temp_MySQL_Connection_Server + ":"
							+ context.Temp_MySQL_Connection_Port + "/" + context.Temp_MySQL_Connection_Database + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = context.Temp_MySQL_Connection_Login;

				final String decryptedPassword_tDBOutput_1 = context.Temp_MySQL_Connection_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				String insert_tDBOutput_1 = "INSERT INTO `" + "salesdata"
						+ "` (`ID`,`SalesOrderID`,`SalesOrderDetailID`,`OrderQuantity`,`ProductID`,`UnitPrice`,`UnitPriceDiscount`,`ModifiedDate`,`OrderDate`,`ShipDate`,`Status`,`SalesOrderNumber`,`CustomerID`,`SalesPersonID`,`PersonID`,`BusinessEntityID`,`Title`,`FirstName`,`MiddleName`,`LastName`,`Gender`,`EmailAddress`,`AddressID`,`Address`,`ZipCode`,`StateCode`,`StateName`,`CountryCode`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_13 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_13", false);
				start_Hash.put("tFileInputExcel_13", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_13";

				int tos_count_tFileInputExcel_13 = 0;

				final String decryptedPassword_tFileInputExcel_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:TZCaGY7yF6UTLEpCG5Kyw/LH1djSyrORVW0d1g==");
				String password_tFileInputExcel_13 = decryptedPassword_tFileInputExcel_13;
				if (password_tFileInputExcel_13.isEmpty()) {
					password_tFileInputExcel_13 = null;
				}
				class RegexUtil_tFileInputExcel_13 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_13 regexUtil_tFileInputExcel_13 = new RegexUtil_tFileInputExcel_13();

				Object source_tFileInputExcel_13 = "T:/Data/Work/Greg/SalesData(Dataset#2).xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_13 = null;

				if (source_tFileInputExcel_13 instanceof String) {
					workbook_tFileInputExcel_13 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_13), password_tFileInputExcel_13);
				} else if (source_tFileInputExcel_13 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_13 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_13, password_tFileInputExcel_13);
				} else {
					workbook_tFileInputExcel_13 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_13 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_13 : workbook_tFileInputExcel_13) {
						sheetList_tFileInputExcel_13
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_13);
					}
					if (sheetList_tFileInputExcel_13.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_13 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_13 : sheetList_tFileInputExcel_13) {
						if (sheet_FilterNull_tFileInputExcel_13 != null
								&& sheetList_FilterNull_tFileInputExcel_13.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_13.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_13.add(sheet_FilterNull_tFileInputExcel_13);
						}
					}
					sheetList_tFileInputExcel_13 = sheetList_FilterNull_tFileInputExcel_13;
					if (sheetList_tFileInputExcel_13.size() > 0) {
						int nb_line_tFileInputExcel_13 = 0;

						int begin_line_tFileInputExcel_13 = 1;

						int footer_input_tFileInputExcel_13 = 0;

						int end_line_tFileInputExcel_13 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_13 : sheetList_tFileInputExcel_13) {
							end_line_tFileInputExcel_13 += (sheet_tFileInputExcel_13.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_13 -= footer_input_tFileInputExcel_13;
						int limit_tFileInputExcel_13 = -1;
						int start_column_tFileInputExcel_13 = 1 - 1;
						int end_column_tFileInputExcel_13 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_13 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_13 = sheetList_tFileInputExcel_13
								.get(0);
						int rowCount_tFileInputExcel_13 = 0;
						int sheetIndex_tFileInputExcel_13 = 0;
						int currentRows_tFileInputExcel_13 = (sheetList_tFileInputExcel_13.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_13 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_13 = df_tFileInputExcel_13.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_13 = begin_line_tFileInputExcel_13; i_tFileInputExcel_13 < end_line_tFileInputExcel_13; i_tFileInputExcel_13++) {

							int emptyColumnCount_tFileInputExcel_13 = 0;

							if (limit_tFileInputExcel_13 != -1
									&& nb_line_tFileInputExcel_13 >= limit_tFileInputExcel_13) {
								break;
							}

							while (i_tFileInputExcel_13 >= rowCount_tFileInputExcel_13
									+ currentRows_tFileInputExcel_13) {
								rowCount_tFileInputExcel_13 += currentRows_tFileInputExcel_13;
								sheet_tFileInputExcel_13 = sheetList_tFileInputExcel_13
										.get(++sheetIndex_tFileInputExcel_13);
								currentRows_tFileInputExcel_13 = (sheet_tFileInputExcel_13.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_13_CURRENT_SHEET", sheet_tFileInputExcel_13.getSheetName());
							if (rowCount_tFileInputExcel_13 <= i_tFileInputExcel_13) {
								row_tFileInputExcel_13 = sheet_tFileInputExcel_13
										.getRow(i_tFileInputExcel_13 - rowCount_tFileInputExcel_13);
							}
							row14 = null;
							int tempRowLength_tFileInputExcel_13 = 28;

							int columnIndex_tFileInputExcel_13 = 0;

							String[] temp_row_tFileInputExcel_13 = new String[tempRowLength_tFileInputExcel_13];
							int excel_end_column_tFileInputExcel_13;
							if (row_tFileInputExcel_13 == null) {
								excel_end_column_tFileInputExcel_13 = 0;
							} else {
								excel_end_column_tFileInputExcel_13 = row_tFileInputExcel_13.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_13;
							if (end_column_tFileInputExcel_13 == -1) {
								actual_end_column_tFileInputExcel_13 = excel_end_column_tFileInputExcel_13;
							} else {
								actual_end_column_tFileInputExcel_13 = end_column_tFileInputExcel_13 > excel_end_column_tFileInputExcel_13
										? excel_end_column_tFileInputExcel_13
										: end_column_tFileInputExcel_13;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_13 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_13; i++) {
								if (i + start_column_tFileInputExcel_13 < actual_end_column_tFileInputExcel_13) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_13 = row_tFileInputExcel_13
											.getCell(i + start_column_tFileInputExcel_13);
									if (cell_tFileInputExcel_13 != null) {
										switch (cell_tFileInputExcel_13.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_13[i] = cell_tFileInputExcel_13
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_13)) {
												temp_row_tFileInputExcel_13[i] = cell_tFileInputExcel_13
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_13[i] = df_tFileInputExcel_13
														.format(cell_tFileInputExcel_13.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_13[i] = String
													.valueOf(cell_tFileInputExcel_13.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_13.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_13[i] = cell_tFileInputExcel_13
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_13)) {
													temp_row_tFileInputExcel_13[i] = cell_tFileInputExcel_13
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_13 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_13.getNumericCellValue());
													temp_row_tFileInputExcel_13[i] = ne_tFileInputExcel_13
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_13[i] = String
														.valueOf(cell_tFileInputExcel_13.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_13[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_13[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_13[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_13[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_13 = false;
							row14 = new row14Struct();
							int curColNum_tFileInputExcel_13 = -1;
							String curColName_tFileInputExcel_13 = "";
							try {
								columnIndex_tFileInputExcel_13 = 0;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "ID";

									row14.ID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.ID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 1;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "SalesOrderID";

									row14.SalesOrderID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.SalesOrderID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 2;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "SalesOrderDetailID";

									row14.SalesOrderDetailID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.SalesOrderDetailID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 3;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "OrderQuantity";

									row14.OrderQuantity = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.OrderQuantity = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 4;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "ProductID";

									row14.ProductID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.ProductID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 5;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "UnitPrice";

									row14.UnitPrice = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.UnitPrice = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 6;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "UnitPriceDiscount";

									row14.UnitPriceDiscount = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.UnitPriceDiscount = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 7;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "ModifiedDate";

									row14.ModifiedDate = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.ModifiedDate = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 8;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "OrderDate";

									row14.OrderDate = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.OrderDate = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 9;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "ShipDate";

									row14.ShipDate = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.ShipDate = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 10;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "Status";

									row14.Status = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.Status = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 11;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "SalesOrderNumber";

									row14.SalesOrderNumber = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.SalesOrderNumber = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 12;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "CustomerID";

									row14.CustomerID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.CustomerID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 13;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "SalesPersonID";

									row14.SalesPersonID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.SalesPersonID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 14;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "PersonID";

									row14.PersonID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.PersonID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 15;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "BusinessEntityID";

									row14.BusinessEntityID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.BusinessEntityID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 16;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "Title";

									row14.Title = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.Title = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 17;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "FirstName";

									row14.FirstName = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.FirstName = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 18;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "MiddleName";

									row14.MiddleName = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.MiddleName = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 19;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "LastName";

									row14.LastName = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.LastName = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 20;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "Gender";

									row14.Gender = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.Gender = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 21;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "EmailAddress";

									row14.EmailAddress = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.EmailAddress = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 22;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "AddressID";

									row14.AddressID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13], null,
											'.' == decimalChar_tFileInputExcel_13 ? null
													: decimalChar_tFileInputExcel_13));
								} else {
									row14.AddressID = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 23;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "Address";

									row14.Address = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.Address = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 24;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "ZipCode";

									row14.ZipCode = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.ZipCode = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 25;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "StateCode";

									row14.StateCode = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.StateCode = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 26;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "StateName";

									row14.StateName = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.StateName = null;
									emptyColumnCount_tFileInputExcel_13++;
								}
								columnIndex_tFileInputExcel_13 = 27;

								if (temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13].length() > 0) {
									curColNum_tFileInputExcel_13 = columnIndex_tFileInputExcel_13
											+ start_column_tFileInputExcel_13 + 1;
									curColName_tFileInputExcel_13 = "CountryCode";

									row14.CountryCode = temp_row_tFileInputExcel_13[columnIndex_tFileInputExcel_13];
								} else {
									row14.CountryCode = null;
									emptyColumnCount_tFileInputExcel_13++;
								}

								nb_line_tFileInputExcel_13++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_13 = true;
								System.err.println(e.getMessage());
								row14 = null;
							}

							/**
							 * [tFileInputExcel_13 begin ] stop
							 */

							/**
							 * [tFileInputExcel_13 main ] start
							 */

							currentComponent = "tFileInputExcel_13";

							tos_count_tFileInputExcel_13++;

							/**
							 * [tFileInputExcel_13 main ] stop
							 */

							/**
							 * [tFileInputExcel_13 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_13";

							/**
							 * [tFileInputExcel_13 process_data_begin ] stop
							 */
// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
								}

								whetherReject_tDBOutput_1 = false;
								if (row14.ID == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(1, row14.ID);
								}

								if (row14.SalesOrderID == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(2, row14.SalesOrderID);
								}

								if (row14.SalesOrderDetailID == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(3, row14.SalesOrderDetailID);
								}

								if (row14.OrderQuantity == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(4, row14.OrderQuantity);
								}

								if (row14.ProductID == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(5, row14.ProductID);
								}

								if (row14.UnitPrice == null) {
									pstmt_tDBOutput_1.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_1.setFloat(6, row14.UnitPrice);
								}

								if (row14.UnitPriceDiscount == null) {
									pstmt_tDBOutput_1.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_1.setFloat(7, row14.UnitPriceDiscount);
								}

								if (row14.ModifiedDate == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, row14.ModifiedDate);
								}

								if (row14.OrderDate == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, row14.OrderDate);
								}

								if (row14.ShipDate == null) {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(10, row14.ShipDate);
								}

								if (row14.Status == null) {
									pstmt_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(11, row14.Status);
								}

								if (row14.SalesOrderNumber == null) {
									pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(12, row14.SalesOrderNumber);
								}

								if (row14.CustomerID == null) {
									pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(13, row14.CustomerID);
								}

								if (row14.SalesPersonID == null) {
									pstmt_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(14, row14.SalesPersonID);
								}

								if (row14.PersonID == null) {
									pstmt_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(15, row14.PersonID);
								}

								if (row14.BusinessEntityID == null) {
									pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(16, row14.BusinessEntityID);
								}

								if (row14.Title == null) {
									pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(17, row14.Title);
								}

								if (row14.FirstName == null) {
									pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(18, row14.FirstName);
								}

								if (row14.MiddleName == null) {
									pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(19, row14.MiddleName);
								}

								if (row14.LastName == null) {
									pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(20, row14.LastName);
								}

								if (row14.Gender == null) {
									pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(21, row14.Gender);
								}

								if (row14.EmailAddress == null) {
									pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(22, row14.EmailAddress);
								}

								if (row14.AddressID == null) {
									pstmt_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(23, row14.AddressID);
								}

								if (row14.Address == null) {
									pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(24, row14.Address);
								}

								if (row14.ZipCode == null) {
									pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(25, row14.ZipCode);
								}

								if (row14.StateCode == null) {
									pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(26, row14.StateCode);
								}

								if (row14.StateName == null) {
									pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(27, row14.StateName);
								}

								if (row14.CountryCode == null) {
									pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(28, row14.CountryCode);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;
								if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
													? 0
													: 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());

									}
									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "row14"

							/**
							 * [tFileInputExcel_13 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_13";

							/**
							 * [tFileInputExcel_13 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_13 end ] start
							 */

							currentComponent = "tFileInputExcel_13";

						}

						globalMap.put("tFileInputExcel_13_NB_LINE", nb_line_tFileInputExcel_13);

					}

				} finally {

					if (!(source_tFileInputExcel_13 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_13.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_13", true);
				end_Hash.put("tFileInputExcel_13", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_13 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_13 finally ] start
				 */

				currentComponent = "tFileInputExcel_13";

				/**
				 * [tFileInputExcel_13 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_13_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final DQ_ETL_Job_DS2 DQ_ETL_Job_DS2Class = new DQ_ETL_Job_DS2();

		int exitCode = DQ_ETL_Job_DS2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = DQ_ETL_Job_DS2.class.getClassLoader()
					.getResourceAsStream("dq_poc/dq_etl_job_ds2_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = DQ_ETL_Job_DS2.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("Temp_MySQL_Connection_Server", "id_String");
					context.Temp_MySQL_Connection_Server = (String) context.getProperty("Temp_MySQL_Connection_Server");
					context.setContextType("Temp_MySQL_Connection_Login", "id_String");
					context.Temp_MySQL_Connection_Login = (String) context.getProperty("Temp_MySQL_Connection_Login");
					context.setContextType("Temp_MySQL_Connection_AdditionalParams", "id_String");
					context.Temp_MySQL_Connection_AdditionalParams = (String) context
							.getProperty("Temp_MySQL_Connection_AdditionalParams");
					context.setContextType("Temp_MySQL_Connection_Port", "id_String");
					context.Temp_MySQL_Connection_Port = (String) context.getProperty("Temp_MySQL_Connection_Port");
					context.setContextType("Temp_MySQL_Connection_Password", "id_Password");
					String pwd_Temp_MySQL_Connection_Password_value = context
							.getProperty("Temp_MySQL_Connection_Password");
					context.Temp_MySQL_Connection_Password = null;
					if (pwd_Temp_MySQL_Connection_Password_value != null) {
						if (context_param.containsKey("Temp_MySQL_Connection_Password")) {// no need to decrypt if it
																							// come from program
																							// argument or parent job
																							// runtime
							context.Temp_MySQL_Connection_Password = pwd_Temp_MySQL_Connection_Password_value;
						} else if (!pwd_Temp_MySQL_Connection_Password_value.isEmpty()) {
							try {
								context.Temp_MySQL_Connection_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_Temp_MySQL_Connection_Password_value);
								context.put("Temp_MySQL_Connection_Password", context.Temp_MySQL_Connection_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("Temp_MySQL_Connection_Database", "id_String");
					context.Temp_MySQL_Connection_Database = (String) context
							.getProperty("Temp_MySQL_Connection_Database");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("Temp_MySQL_Connection_Server")) {
				context.Temp_MySQL_Connection_Server = (String) parentContextMap.get("Temp_MySQL_Connection_Server");
			}
			if (parentContextMap.containsKey("Temp_MySQL_Connection_Login")) {
				context.Temp_MySQL_Connection_Login = (String) parentContextMap.get("Temp_MySQL_Connection_Login");
			}
			if (parentContextMap.containsKey("Temp_MySQL_Connection_AdditionalParams")) {
				context.Temp_MySQL_Connection_AdditionalParams = (String) parentContextMap
						.get("Temp_MySQL_Connection_AdditionalParams");
			}
			if (parentContextMap.containsKey("Temp_MySQL_Connection_Port")) {
				context.Temp_MySQL_Connection_Port = (String) parentContextMap.get("Temp_MySQL_Connection_Port");
			}
			if (parentContextMap.containsKey("Temp_MySQL_Connection_Password")) {
				context.Temp_MySQL_Connection_Password = (java.lang.String) parentContextMap
						.get("Temp_MySQL_Connection_Password");
			}
			if (parentContextMap.containsKey("Temp_MySQL_Connection_Database")) {
				context.Temp_MySQL_Connection_Database = (String) parentContextMap
						.get("Temp_MySQL_Connection_Database");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("Temp_MySQL_Connection_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_13) {
			globalMap.put("tFileInputExcel_13_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_13.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : DQ_ETL_Job_DS2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 84905 characters generated by Talend Open Studio for Data Integration on the
 * October 1, 2021 5:00:49 PM EET
 ************************************************************************************************/
